
'use strict';

function Mat() {
    this.a00 = 0;
    this.a01 = 0;
    this.a10 = 0;
    this.a11 = 0;
    this.a02 = 0;
    this.a12 = 0;

    this.rotate = function(cp, u, v) {
        var w = [u[0] + v[0], u[1] + v[1]];
        var c = this.transform(cp);
        var cn = [-c[0], -c[1]];
        return this.translate(cn).reflect(u).reflect(w).translate(c);
    }

    this.transform = function(x) {
        var y = [0,0];
        y[0] += x[0] * this.a00 + x[1] * this.a01 + this.a02;
        y[1] += x[0] * this.a10 + x[1] * this.a11 + this.a12;
        return y;
    }
    this.reflect = function(vp) {
        var b = new Mat();
        var n = Math.sqrt(vp[0] * vp[0] + vp[1] * vp[1]);
        var v = [vp[0]/n, vp[1]/n];

        b.a00 = 1 - 2 * v[0] * v[0];
        b.a01 = 0 - 2 * v[0] * v[1];
        b.a10 = 0 - 2 * v[1] * v[0];
        b.a11 = 1 - 2 * v[1] * v[1];
        return b.multiply(this);
    }
    this.translate = function(v) {
        var b = Mat.identity();
        b.a02 = v[0];
        b.a12 = v[1];
        return b.multiply(this);
    }
    this.scale = function(v) {
        var b = new Mat();
        b.a00 = v[0];
        b.a11 = v[1];
        return b.multiply(this);
    }

    this.multiply = function(b) {
        var c = new Mat();
        c.a00 = this.a00 * b.a00 + this.a01 * b.a10;
        c.a01 = this.a00 * b.a01 + this.a01 * b.a11;
        c.a10 = this.a10 * b.a00 + this.a11 * b.a10;
        c.a11 = this.a10 * b.a01 + this.a11 * b.a11;
        c.a02 = this.a00 * b.a02 + this.a01 * b.a12 + this.a02;
        c.a12 = this.a10 * b.a02 + this.a11 * b.a12 + this.a12;
        return c;
    }


    this.setTransform = function(context) {
        currentTransform = Mat.copy(this);
        context.setTransform(
            this.a00, this.a10, this.a01, this.a11, this.a02, this.a12
        );
    }
}
Mat.identity = function() {
    var a = new Mat();
    a.a00 = 1;
    a.a11 = 1;
    return a;
}
Mat.copy = function(m) {
    var a = new Mat();

    a.a00 = m.a00;
    a.a10 = m.a10;
    a.a01 = m.a01;
    a.a11 = m.a11;
    a.a02 = m.a02;
    a.a12 = m.a12;
    

    return a;
}

Mat.fromTransform = function(context) {
    var a = new Mat();

    {
        a.a00 = currentTransform.a00;
        a.a10 = currentTransform.a10;
        a.a01 = currentTransform.a01;
        a.a11 = currentTransform.a11;
        a.a02 = currentTransform.a02;
        a.a12 = currentTransform.a12;
    }

    return a;
}

function drawPattern(context, orientation, centerColor, count, color, background) {
    context.save2();
    if(orientation) {
        var transform = Mat.fromTransform(context);
        transform = transform.rotate([0.5,0.5], [0,1],[1,0]);
        transform.setTransform(context);
    } else {
        var transform = Mat.fromTransform(context);
        transform.setTransform(context);
    }


    var height = 1.0 / (2 * count - 1);
    context.beginPath();
    context.fillStyle = background;
    context.rect(0, 0, 1, 1);
    context.fill();
     
    context.beginPath();
    context.fillStyle = color;
    for(var i = 0; i < count; i++) {
        var y = (2 * i) * height;
        context.rect(0, y, 1, height);
        context.fill();
    }
    if(centerColor) {
        context.beginPath();
        context.fillStyle = centerColor;
        context.arc(0.5,0.5,height/2,0, 2 * Math.PI);
        context.fill();
    }
    context.restore2();
}

function drawDefault(context) {
    var COUNT = 10;
    var PADDING = 0.025;
    context.save2();
    var transform = Mat.fromTransform(context);

    var scaled = transform.translate(transform.transform([-0.5,-0.5])).scale([0.5,0.5]).scale([1-2*PADDING,1-2*PADDING]).translate(transform.transform([0.25,0.25]));
    scaled.setTransform(context);
    drawPattern(context, false, null, COUNT, 'black', 'white');

    scaled.translate(transform.transform([0.5,0.5])).setTransform(context);
    drawPattern(context, false, null, COUNT, 'black', 'white');

    scaled.translate(transform.transform([0.0,0.5])).setTransform(context);
    drawPattern(context, true, null, COUNT, 'black', 'white');

    scaled.translate(transform.transform([0.5,0.0])).setTransform(context);
    drawPattern(context, true, null, COUNT, 'black', 'white');

    context.restore2();
}

var transformStack = [];
var currentTransform;

$(document).ready(function() {
    var COUNT = 20;
    var ROTATION_FRAMERATE = 1000.0 / 30.0;
    var INTERVAL_TIME = 2000;
    var TOTAL_TIME = 1000 * 60 * 3;
    var INTERVAL_COUNT = Math.floor(TOTAL_TIME / INTERVAL_TIME);
	var canvas = document.getElementById('canvas');
	var context = canvas.getContext('2d');
	$('#prompt').text('The McCollough Effect');

    canvas.height = Math.floor(window.innerHeight *7/8);
    canvas.width = canvas.height;

    currentTransform = Mat.identity();
    var contextSave = context.save;
    context.save2= function() {
        transformStack.push(Mat.copy(currentTransform));
        context.save();
    }

    context.restore2 = function() {
        context.restore();
        currentTransform = transformStack.pop();
        currentTransform.setTransform(context);
    }

    var progress = 'starting';
    var timer = null;
    var intervals = 0;
    function displayInduction() {
        var color;
        if(intervals >= INTERVAL_COUNT || progress != 'inducingAnimation') {
            progress = 'review';
            return;
        }
        intervals++;
        color = (intervals % 2 == 0) ? 'red' : 'lime';
        if(color == 'red') {
            drawPattern(context, false, 'white', COUNT, color, 'black');
        } else if(color == 'lime') {
            drawPattern(context, true, 'white', COUNT, color, 'black');
        }
    }
    var rot = Mat.identity();

    function displayRotation() {
        context.save2();
        var transform = Mat.fromTransform(context);
        context.clearRect(0,0,1,1);
        transform.multiply(rot).setTransform(context);
        drawPattern(context, false, null, COUNT, 'black','white');
        context.restore2();
        rot = rot.rotate([0.5,0.5], [1,0], [1,1e-2]);
    }

    currentTransform = currentTransform.scale([canvas.width,canvas.height]);

	$('#start').click(function(event) {
        if(progress == 'starting') {
            $('#prompt').text('Look at the pattern below. Note that the next step may cause long term brain changes.');
            context.clearRect(0,0,1,1);
            drawDefault(context);
            $('#start').text('Next');
            progress = 'inducing';
        } else if(progress == 'inducing') {
            $('#prompt').text('Look at the center of the patterns for the next three minutes.');
            progress = 'inducingAnimation';
            displayInduction();
            timer = window.setInterval(displayInduction, INTERVAL_TIME);
        } else if(progress == 'inducingAnimation' || progress == 'review') {
            window.clearInterval(timer);
            $('#prompt').text('Look at the original pattern again. Notice the apparent color change.');
            context.clearRect(0,0,1,1);
            drawDefault(context);
            progress = 'rotating';
        } else if(progress == 'rotating') {
            $('#prompt').text('Notice the apparent color changes when the pattern rotates.');
            timer = window.setInterval(displayRotation, ROTATION_FRAMERATE);
            progress = 'ending';
            $('#start').text('End');
        } else if(progress == 'ending') {
            $('#prompt').text('The McCollough Effect');
            window.clearInterval(timer);
            context.clearRect(0,0,1,1);
            progress = 'starting';
            $('#start').text('Start');
        }
	});
});
